import de.gesellix.gradle.docker.tasks.DockerBuildTask
import de.gesellix.gradle.docker.tasks.DockerTagTask
import de.gesellix.gradle.docker.tasks.GenericDockerTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'application'
    id 'de.gesellix.docker' version '2019-12-16T09-02-32'
}

ext.jUnitVersion = "5.5.2"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src/main/kotlin']
    test.kotlin.srcDirs = test.java.srcDirs = ['src/test/kotlin']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}


repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.ktor:ktor-jackson:$ktor_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"

    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.10.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "org.jetbrains:kotlin-css-jvm:1.0.0-pre.31-kotlin-1.2.41"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation 'org.jetbrains.exposed:exposed:0.17.7'

    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

group 'ru.snailmail'
version '0.001-PRE-ALPHA'
mainClassName = "ru.snailmail.backend.MasterKt"

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

docker {
    dockerHost = 'unix:///var/run/docker.sock'
}

def groupDocker = "docker"

ext.build = (project.hasProperty('teamcity')) ? project.teamcity['build.number'] : 'local_build'
version = ext.build.replaceAll("(\\S+)\\s*.*", "\$1")

ext {
    dockerRegistry = "ogps.registry.jetbrains.space"
    productName = "server"
    dockerImageName = "snailmail-east/$productName"
    dockerImageAndTag = "$dockerImageName:$version"
    remoteDockerImageAndTag = "$dockerImageName:$version"
}

task buildLocalDockerImage(type: DockerBuildTask) {
    dependsOn installDist
    group = groupDocker
    buildParams = [
            'nocache'  : 'true'
    ]
    imageName = dockerImageAndTag
    buildContextDirectory = file(".")
    doFirst {
        println("Building docker image $imageName ...")
    }
}

task tagDockerImage(type: DockerTagTask) {
    dependsOn buildLocalDockerImage
    group = null
    imageId = dockerImageAndTag
    tag = "$dockerRegistry/$remoteDockerImageAndTag"
    doFirst {
        println("Tag docker image $imageId as $tag ...")
    }
}

task pushDockerImageToRegistry(type: Exec) {
    dependsOn tagDockerImage
    executable "sh"
    group = groupDocker
    args "-c", "/usr/bin/docker push $dockerRegistry/$remoteDockerImageAndTag"
}

task removeLocalDockerImages(type: GenericDockerTask) {
    group = groupDocker
    doFirst {
        println("Removing local images : $dockerImageAndTag, $remoteDockerImageAndTag and $dockerRegistry/$remoteDockerImageAndTag ...")
    }
    doLast {
        def docker = getDockerClient()
        docker.rmi(dockerImageAndTag)
        docker.rmi(remoteDockerImageAndTag)
        docker.rmi("$dockerRegistry/$remoteDockerImageAndTag")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=io.ktor.util.KtorExperimentalAPI"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=io.ktor.util.KtorExperimentalAPI"]
}
